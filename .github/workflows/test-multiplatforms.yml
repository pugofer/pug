name: Test Multi-Platforms

on:
  push:
    branches: [ main, cpack-builds ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake python3 python3-pip python3-venv
    
    - name: Setup Python environment
      run: |
        cd test
        make setup
    
    - name: Build and test
      run: |
        cd test
        make ci
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-linux
        path: test-reports/

  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A x64
    
    - name: Build Pug
      run: |
        cd build
        cmake --build . --config Release
    
    - name: Copy artifacts for testing
      run: |
        copy build\src\Release\pug.exe .\pug.exe
        xcopy /E /I langlevels .\langlevels
    
    - name: Run tests
      run: |
        python test/run_tests_with_reports.py --verbose --xml-output test-reports --timeout 180
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-windows
        path: test-reports/

  test-windows-mingw:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install MinGW-w64 and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 cmake python3 python3-pip python3-venv
    
    - name: Setup Python environment
      run: |
        cd test
        make setup
    
    - name: Cross-compile for Windows
      run: |
        mkdir build-windows
        cd build-windows
        cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/mingw-w64-toolchain.cmake -DCMAKE_BUILD_TYPE=Release
        cmake --build . --parallel
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pug-windows-mingw
        path: |
          build-windows/src/pug.exe
          langlevels/

  test-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew install cmake python@3.12
    
    - name: Setup Python environment
      run: |
        python3 -m pip install --upgrade pip
        pip3 install -r requirements-test.txt
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_DEPLOYMENT_TARGET=10.12
    
    - name: Build Pug
      run: |
        cd build
        cmake --build . --parallel
    
    - name: Run tests
      run: |
        cd test
        PYTHON_TO_USE=python3 make ci
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-macos
        path: test-reports/

  build-artifacts:
    needs: [test-linux, test-windows, test-macos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake mingw-w64
    
    - name: Build Linux release
      run: |
        mkdir build-linux
        cd build-linux
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --parallel
        cpack
    
    - name: Build Windows release
      run: |
        mkdir build-windows
        cd build-windows
        cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/mingw-w64-toolchain.cmake -DCMAKE_BUILD_TYPE=Release
        cmake --build . --parallel
    
    - name: Package releases
      run: |
        # Create release packages
        mkdir -p releases
        
        # Linux package
        cd build-linux
        tar -czf ../releases/pug-linux-x64.tar.gz src/pug ../langlevels
        cd ..
        
        # Windows package
        cd build-windows
        zip -r ../releases/pug-windows-x64.zip src/pug.exe ../langlevels
        cd ..
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pug-releases
        path: releases/
