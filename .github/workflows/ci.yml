# This name will appear in the "Actions" tab of your GitHub repository.
name: Pug CI

# This workflow runs on pushes to main branches and PRs to devel branch.
on:
  push:
    branches: [ main, tests ]
  pull_request:
    branches: [ devel ]
  workflow_dispatch:   # Allows manual triggering

jobs:
  build-and-test:
    timeout-minutes: 10  # Prevent jobs from hanging indefinitely
    strategy:
      matrix:
        os: [ubuntu-latest]  # Disabling windows-latest for now
        include:
          - os: ubuntu-latest
            shell: bash
          - os: windows-latest
            shell: msys2 {0}

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      # Step 1: Check out the repository's code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up MSYS2 on Windows
      - name: Set up MSYS2 (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-python
            mingw-w64-ucrt-x86_64-python-pip
            bison
            make

      # Step 3: Set up Python on Ubuntu
      - name: Set up Python (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install Python dependencies
      - name: Install Python dependencies
        run: pip install -r requirements-test.txt

      # Step 5: Build the pug interpreter
      - name: Build pug interpreter
        run: make -C src

      # Step 6: Run the tests with XML reporting
      - name: Run interpreter tests with XML reports
        run: make -C src test-reports

      # Step 7: Upload test results to GitHub
      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if tests fail
        with:
          name: Test Results (${{ matrix.os }})
          path: test-reports/*.xml
          reporter: java-junit
          fail-on-error: true

      # Step 8: Upload HTML reports as artifacts
      - name: Upload HTML Test Reports
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests fail
        with:
          name: test-reports-${{ matrix.os }}
          path: test-reports/
          retention-days: 30
